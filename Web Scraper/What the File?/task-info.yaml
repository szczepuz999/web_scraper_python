type: edu
files:
- name: scraper.py
  visible: true
  text: |-
    import requests
    from bs4 import BeautifulSoup
    import json


    def get_ld_json(url: str) -> dict:
        parser = "html.parser"
        req = requests.get(url, headers={'Accept-Language': 'en-US,en;q=0.5'})
        soup = BeautifulSoup(req.text, parser)
        return json.loads("".join(soup.find("script", {"type": "application/ld+json"}).contents))

    def scraper_title(url):
        parser = "html.parser"
        req = requests.get(url, headers={'Accept-Language': 'en-US,en;q=0.5'})
        soup = BeautifulSoup(req.text, parser)
        title = soup.findAll('title')
        # for i in title:
        #     print(i.text)
        return title[0].text
    def apostrophe_fix(text):
        if "&apos" in text:
            new_text = text.replace("&apos;", "'")
        else: new_text = text
        return new_text


    # scraper('http://api.quotable.io/quotes/asdf')
    url = input("Input the URL:\n")
    correct_url = "www.imdb.com"
    if correct_url in url:
        a = (get_ld_json(url))
        # print(a["@type"])
        if a["@type"] == "Movie" or a["@type"] == "TVSeries":
            # x = dict(title=a["name"], description=a["description"])
            x={}
            x["title"] = scraper_title(url)
            x["description"] = apostrophe_fix(a["description"])
            print("")
            print(x)
        else:
            print("\nInvalid movie page!")
    else: print("\nInvalid movie page!")

    # scraper_title(url)

    # a = (get_ld_json(url))
    # print(a['trailer']['description'])
    # print(apostrophe_fix("An organized crime dynasty&apos;s aging patriarch t"))
  learner_created: false
- name: tests.py
  visible: false
  text: |
    import requests
    from hstest.check_result import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase


    class WebScraperTest(StageTest):
        def generate(self):
            return [TestCase(stdin="https://github.blog/notexisting",
                             check_function=self.check_not_200,
                             attach="https://github.blog/notexisting", time_limit=0),
                    TestCase(stdin="http://httpstat.us/403",
                             check_function=self.check_not_200,
                             attach="http://httpstat.us/403", time_limit=0),
                    TestCase(
                        stdin='http://www.pythonchallenge.com/pc/def/0.html',
                        check_function=self.check_200,
                        attach="http://www.pythonchallenge.com/pc/def/0.html", time_limit=0)]

        def check_200(self, reply, attach):
            try:
                test_content = requests.get(attach).content
            except Exception:
                return CheckResult.wrong("An error occurred when tests tried to connect to the Internet page.\n"
                                         "Please, try again.")
            try:
                with open("source.html", "rb") as f:
                    file_content = f.read()
                    if file_content == test_content:
                        return CheckResult.correct() if "Content saved" in reply and "The URL returned" not in reply \
                            else CheckResult.wrong("Did you notify the user you've saved the content?")
                    else:
                        return CheckResult.wrong("The content of the file is not correct!")
            except FileNotFoundError:
                return CheckResult.wrong("Couldn't find the source.html file")

        def check_not_200(self, reply, attach):
            try:
                status_code = requests.get(attach).status_code
            except Exception:
                return CheckResult.wrong("An error occurred when tests tried to connect to the Internet page.\n"
                                         "Please, try again.")
            if f"The URL returned" in reply and "Content saved" not in reply:
                if str(status_code) in reply:
                    return CheckResult.correct()
                else:
                    return CheckResult.wrong("The returned error doesn't match with the output message.")
            else:
                return CheckResult.wrong("The link returned an error, but your program didn't.")


    if __name__ == '__main__':
        WebScraperTest().run_tests()
  learner_created: false
- name: source.html
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/145/stages/783/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 13 Jun 2021 20:29:11 UTC
record: 3
